#!/usr/bin/env bash

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }
SCRIPT_DIR=$(get_script_dir)

# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
PROGNAME=$(basename "$0")

cleanup_complete=0

cleanup() {
  if [ $SERVER_IS_REMOTE ]; then
    echo 'closing down remote'
    if [ -e /tmp/jlsession:%h:%p:%r ]; then
      if [ ! -z "$port" ]; then
        ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" "direnv exec "$TARGET_DIR" jupyter notebook stop $port"
      fi
      for t in $tunnels; do
        IFS=':' read -r -a tunnels_array <<< "$t"
        local_port="${tunnels_array[0]}"
        remote_server_address="${tunnels_array[1]}"
        remote_port="${tunnels_array[2]}"
        echo "Closing tunnel from port $local_port of jupyter server to port $remote_port of $remote_server_address"
        ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" "ssh -S /tmp/jlsession:%h:%p:%r -O exit ""$remote_server_address"
      done
      ssh -S /tmp/jlsession:%h:%p:%r -O exit "$JUPYTER_SERVER_ADDRESS"
    fi
    echo 'bye (remote)'
  else
    if [ ! -z "$port" ]; then
      direnv exec "$TARGET_DIR" jupyter notebook stop $port
    fi
    if [ -e /tmp/jlsession:%h:%p:%r ]; then
      for t in $tunnels; do
        IFS=':' read -r -a tunnels_array <<< "$t"
        local_port="${tunnels_array[0]}"
        remote_server_address="${tunnels_array[1]}"
        remote_port="${tunnels_array[2]}"
        echo "Closing tunnel from port $local_port of jupyter server to port $remote_port of $remote_server_address"
        ssh -S /tmp/jlsession:%h:%p:%r -O exit "$remote_server_address"
      done
    fi
    echo 'bye (local)'
  fi

  cleanup_complete=1

  echo "$PROGNAME: goodbye"
}

error_exit() {
#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------

  read -r line file <<<"$(caller)"
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ]; then
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}

trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

############################################
# Handle CLI args with argbash
# To edit CLI args, edit template section of <myscript>.argbash.sh and run argbash:
#   argbash <myscript>.argbash.sh -o <myscript>.argbash.sh
# where <myscript> should be the name of this script, ie., $(basename $0)
source "$0.argbash.sh"
target="$_arg_target"
port="$_arg_port"
tunnels="$_arg_tunnel"
############################################

# ssh doesn't like '~' in the paths
ssh_safe_target=$(echo "$target" | sed 's/:~/:$HOME/')
echo "ssh_safe_target: $ssh_safe_target"

# if input has a colon, assume target is referring to a remote jupyter server
if [[ "$ssh_safe_target" == *":"* ]]; then
  SERVER_IS_REMOTE=1
  JUPYTER_SERVER_ADDRESS="${ssh_safe_target%:*}"
  TARGET_DIR="${ssh_safe_target##*:}"
else
  TARGET_DIR="$ssh_safe_target"
fi

token=""

if [[ -z "$JUPYTER_SERVER_ADDRESS" ]]; then
  if jupyter-lab --version >/dev/null 2>&1; then
    echo "Launching locally..."
    token=$(bash ./jl_launch_local.sh "$TARGET_DIR" "$port")
  else
    error_exit "jupyter-lab not installed locally. Did you mean to run on a remote server?
    Run $0 --help to see how to specify a remote server and target directory."
  fi
else
  echo "Launching remote server $JUPYTER_SERVER_ADDRESS..."

  # ssh remoteServer 'bash -s' -- < script.sh --argument
  # see https://unix.stackexchange.com/questions/87405/how-can-i-execute-local-script-on-remote-machine-and-include-arguments
  token=$(ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" 'bash -s' -- < ./jl_launch_local.sh "$TARGET_DIR" "$port")
  # TODO: could we use mosh for the tunnel?
  # related: https://github.com/mobile-shell/mosh/issues/24#issuecomment-303151487

  echo "Starting tunnel to jupyter server..."
  ssh -S /tmp/jlsession:%h:%p:%r -L $port:localhost:$port -N -f "$JUPYTER_SERVER_ADDRESS"
  # -S: re-use existing ssh connection
  # -L: local port forwarding
  # -f: send to background
  # -N: don't issue any commands on remote server
fi

if [[ -z "$token" ]]; then
  error_exit "No token found"
fi

url="http://localhost:$port/?token=$token"

for t in $tunnels; do
  IFS=':' read -r -a tunnels_array <<< "$t"
  local_port="${tunnels_array[0]}"
  remote_server_address="${tunnels_array[1]}"
  remote_port="${tunnels_array[2]}"
  echo "Creating tunnel from port $local_port of jupyter server to port $remote_port of $remote_server_address"
  # if this is a tunnel to a remote database, you can access it in jupyterlab
  # via a URI like postgres://localhost:3333/pfocr_plus
  if [ $SERVER_IS_REMOTE ]; then
    ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" \
      'ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r -L '$local_port':localhost':$remote_port' -N -f '"$remote_server_address"
  else
    ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r -L $local_port:localhost:$remote_port -N -f "$remote_server_address"
  fi
  # TODO: if there's a password prompt, will the code above miss it?
done

if xdg-open --version >/dev/null 2>&1; then
  # NixOS
  xdg-open "$url"
elif which open >/dev/null 2>&1; then
  # macOS
  open "$url"
else
  echo "Not sure how to open browser. Visit $url to see the notebook."
fi

echo ""
read -rp "To quit, hit Enter"
