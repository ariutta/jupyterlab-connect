#!/usr/bin/env bash

OUTPUT_FILE=$(mktemp) || exit 1
port="8889"

HELP_MSG="jupyterlab-launch <target>
    When server is local, target defaults to pwd.
    When server is remote, an ssh-style url is required, e.g.:
      jupyterlab-launch nixos.gladstone.internal:code/jupyterlab-demo"

# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
PROGNAME=$(basename "$0")

cleanup_complete=0

cleanup() {
  if [ $SERVER_IS_REMOTE ]; then
    echo 'closing down remote'
    ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" "direnv exec "$TARGET_DIR" jupyter notebook stop $port"
    if [ ! -z "$DB_SERVER_ADDRESS" ]; then
      ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" "ssh -S /tmp/jlsession:%h:%p:%r -O exit ""$DB_SERVER_ADDRESS"
    fi
    ssh -S /tmp/jlsession:%h:%p:%r -O exit "$JUPYTER_SERVER_ADDRESS"
    echo 'bye (remote)'
  else
    direnv exec "$TARGET_DIR" jupyter notebook stop $port
    if [ ! -z "$DB_SERVER_ADDRESS" ]; then
      ssh -S /tmp/jlsession:%h:%p:%r -O exit "$DB_SERVER_ADDRESS"
    fi
    echo 'bye (local)'
  fi

  cleanup_complete=1

  echo "$PROGNAME: goodbye"
}

error_exit() {
#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------

  read -r line file <<<"$(caller)"
  echo "" 1>&2
  echo "ERROR: file $file, line $line" 1>&2
  if [ ! "$1" ]; then
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${1:-"Unknown Error"}" 1>&2
  fi
  echo "" 1>&2

  # TODO: should error_exit call cleanup?
  #       The EXIT trap already calls cleanup, so
  #       calling it here means calling it twice.
  if [ ! $cleanup_complete ]; then
    cleanup
  fi
  exit 1
}

trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

if [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
  echo "$HELP_MSG"
  exit 0
fi

# if input has a colon, assume it's a remote target
if [[ "$1" == *":"* ]]; then
  JUPYTER_SERVER_ADDRESS="${1%:*}"
  TARGET_DIR="${1##*:}"
else
  TARGET_DIR="$1"
fi

DB_SERVER_ADDRESS="wikipathways-workspace.gladstone.internal"

TARGET_DIR=${TARGET_DIR:-'./'}

token=""

if [[ -z "$JUPYTER_SERVER_ADDRESS" ]]; then
  if jupyter-lab --version >/dev/null 2>&1; then
    echo "Launching locally..."
    token=$(bash ./jl_launch_local.sh "$TARGET_DIR" "$port")
  else
    error_exit "$HELP_MSG"
  fi
else
  SERVER_IS_REMOTE=1
  echo "Launching remote server $JUPYTER_SERVER_ADDRESS..."

  # ssh remoteServer 'bash -s' -- < script.sh --argument
  # see https://unix.stackexchange.com/questions/87405/how-can-i-execute-local-script-on-remote-machine-and-include-arguments
  token=$(ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" 'bash -s' -- < ./jl_launch_local.sh "$TARGET_DIR" "$port")
  # TODO: could we use mosh for the tunnel?
  # related: https://github.com/mobile-shell/mosh/issues/24#issuecomment-303151487

  echo "Starting tunnel to jupyter server..."
  ssh -S /tmp/jlsession:%h:%p:%r -L $port:localhost:$port -N -f "$JUPYTER_SERVER_ADDRESS"
  # -S: re-use existing ssh connection
  # -L: local port forwarding
  # -f: send to background
  # -N: don't issue any commands on remote server
fi

if [[ -z "$token" ]]; then
  error_exit "No token found"
fi

url="http://localhost:$port/?token=$token"

## NOTE: disabled for now. DB and jupyter are currently on the same machine.
## Maybe specifying a db server address should be a command line option?

## TODO: the following works, but I'd like to do this the same way as I connect
## to a remote jupyter server. However, that isn't working. It seems I need to
## leave the ssh session "live" and use ctrl-d to exit when I'm done.
if [ ! -z "$DB_SERVER_ADDRESS" ]; then
  echo "Creating db tunnel"
  # access via URI like postgres://localhost:3333/pfocr_plus
  if [ $SERVER_IS_REMOTE ]; then
    ssh -S /tmp/jlsession:%h:%p:%r "$JUPYTER_SERVER_ADDRESS" \
      'ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r -L 3333:localhost:5432 -N -f '"$DB_SERVER_ADDRESS"
  else
    ssh -o ControlMaster=yes -o ControlPersist=yes -S /tmp/jlsession:%h:%p:%r -L 3333:localhost:5432 -N -f "$DB_SERVER_ADDRESS"
  fi
  # TODO: if there's a password prompt, will the code above miss it?
fi

if xdg-open --version >/dev/null 2>&1; then
  # NixOS
  xdg-open "$url"
elif which open >/dev/null 2>&1; then
  # macOS
  open "$url"
else
  echo "Not sure how to open browser. Visit $url to see the notebook."
fi

echo ""
read -rp "To quit, hit Enter"
